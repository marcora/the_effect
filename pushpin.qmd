---
title: "pushpin"
format: 
  html:
    df-print: kable
    toc: true
---

## Setup environment

```{r}
#| output: false
library(tidyverse)
library(ggformula)
library(mosaic)
library(broom)
library(bayestestR)
library(bayesplot)

set.seed(666)

theme_set(theme_minimal())
```

## Simulate data

10 push pin flips: 0 = point-down, 1 = point-up

```{r}
n_flips <- 10

true_theta <- 0.3  # fixed parameter unknown to observer

y <- rbinom(n_flips, size = 1, prob = true_theta)

(successes <- sum(y))

(obs_prop <- mean(y))

df <- tibble(outcome = y)
```

## Frequentist NHST: classical binomial test

```{r}
binom.test(successes, n_flips, p = 0.5, alternative = "two.sided") |> tidy()
```

## Frequentist NHST: sampling distribution under the null

```{r}
# sampling distribution under the null
null_props <- do(10000) * tibble(prop = rbinom(1, size = n_flips, prob = 0.5) / n_flips)

p_value <- mean(abs(null_props - 0.5) >= abs(obs_prop - 0.5))

cat("Two-sided p-value under H₀: θ = 0.5:", round(p_value, 4), "\n")
```

## "Poor man's posterior": resampling of observed data

```{r}
resampled_props <- do(10000) * tibble(prop = mean(~ outcome, data = resample(df)))

favstats(~ prop, data = resampled_props)

# with example ROPE for null = 0.5
describe_posterior(
  resampled_props,
  ci = 0.95,
  rope_range = c(0.45, 0.55),
  test = c("pd", "rope", "hdi", "map")
)

mcmc_areas(resampled_props, prob = .95)
```

## Likelihood inference

```{r}
# grid approximation
theta_grid <- seq(0, 1, length.out = 1000)
```

```{r}
# likelihood of observed data
likelihood <- dbinom(successes, size = n_flips, prob = theta_grid)

plot_df <- tibble(theta = theta_grid, likelihood = likelihood)

gf_line(likelihood ~ theta, data = plot_df, color = "red") |>
  gf_labs(title = "Likelihood of θ given data",
          x = expression(theta),
          y = "density")
```

```{r}
mle_index <- which.max(likelihood)
mle_theta <- theta_grid[mle_index]
max_lik <- likelihood[mle_index]

ci_threshold <- max_lik * exp(-qchisq(0.95, df = 1) / 2)  # ≈ 0.1465 * max_lik

in_ci <- likelihood >= ci_threshold
ci_bounds <- range(theta_grid[in_ci])

tibble(mle = mle_theta,
       ci_lower = ci_bounds[1],
       ci_upper = ci_bounds[2])
```

## Bayesian inference with uniform prior

```{r}
prior_unif <- dunif(theta_grid, min = 0, max = 1)

posterior_unnorm <- prior_unif * likelihood
posterior <- posterior_unnorm / sum(posterior_unnorm)

plot_df <- tibble(
  theta = theta_grid,
  prior = prior_unif / sum(prior_unif),
  likelihood_norm = likelihood / sum(likelihood),
  posterior = posterior
) |>
  pivot_longer(-theta, names_to = "fn", values_to = "density")

gf_line(density ~ theta, color = ~ fn, data = plot_df) |>
  gf_labs(title = "Bayesian inference with uniform prior",
          x = expression(theta),
          y = "density")
```

```{r}
posterior_samples <- sample(theta_grid,
                            size = 10000,
                            replace = TRUE,
                            prob = posterior)

# with example ROPE for null = 0.5
describe_posterior(
  posterior_samples,
  ci = 0.95,
  rope_range = c(0.45, 0.55),
  test = c("pd", "rope", "hdi", "map")
)

mcmc_areas(tibble(theta = posterior_samples),
           pars = "theta",
           prob = .95)
```

## Bayesian inference with beta(2, 3) prior

```{r}
prior_beta <- dbeta(theta_grid, shape1 = 2, shape2 = 3)

posterior_unnorm <- prior_beta * likelihood
posterior <- posterior_unnorm / sum(posterior_unnorm)

plot_df <- tibble(
  theta = theta_grid,
  prior = prior_beta / sum(prior_beta),
  likelihood_norm = likelihood / sum(likelihood),
  posterior = posterior
) |>
  pivot_longer(-theta, names_to = "fn", values_to = "density")

gf_line(density ~ theta, color = ~ fn, data = plot_df) |>
  gf_labs(title = "Bayesian inference with beta(2, 3) prior",
          x = expression(theta),
          y = "density")
```

```{r}
posterior_samples <- sample(theta_grid,
                            size = 10000,
                            replace = TRUE,
                            prob = posterior)

# with example ROPE for null = 0.5
describe_posterior(
  posterior_samples,
  ci = 0.95,
  rope_range = c(0.45, 0.55),
  test = c("pd", "rope", "hdi", "map")
)

mcmc_areas(tibble(theta = posterior_samples),
           pars = "theta",
           prob = .95)
```

## Comparison of Bayesian, likelihood and frequentist inferences when 10/10 flips are point-up

```{r}
successes <- 10

likelihood <- dbinom(successes, size = n_flips, prob = theta_grid)
```

```{r}
# Bayesian inference with beta(2, 3) prior
prior_beta <- dbeta(theta_grid, shape1 = 2, shape2 = 3)
posterior_unnorm <- prior_beta * likelihood
posterior <- posterior_unnorm / sum(posterior_unnorm)

plot_df <- tibble(
  theta = theta_grid,
  prior = prior_beta / sum(prior_beta),
  likelihood_norm = likelihood / sum(likelihood),
  posterior = posterior
) |>
  pivot_longer(-theta, names_to = "fn", values_to = "density")

gf_line(density ~ theta, color = ~ fn, data = plot_df) |>
  gf_labs(title = "Bayesian inference with beta(2, 3) prior",
          x = expression(theta),
          y = "density")
```

```{r}
posterior_samples <- sample(theta_grid,
                            size = 10000,
                            replace = TRUE,
                            prob = posterior)

# with example ROPE for null = 0.5
describe_posterior(
  posterior_samples,
  ci = 0.95,
  rope_range = c(0.45, 0.55),
  test = c("pd", "rope", "hdi", "map")
)

mcmc_areas(tibble(theta = posterior_samples),
           pars = "theta",
           prob = .95)
```

```{r}
# Frequentist NHST: classical binomial test
binom.test(successes, n_flips, p = 0.5, alternative = "two.sided") |> tidy()
```

```{r}
mle_index <- which.max(likelihood)
mle_theta <- theta_grid[mle_index]
max_lik <- likelihood[mle_index]

ci_threshold <- max_lik * exp(-qchisq(0.95, df = 1) / 2)  # ≈ 0.1465 * max_lik

in_ci <- likelihood >= ci_threshold
ci_bounds <- range(theta_grid[in_ci])

tibble(mle = mle_theta,
       ci_lower = ci_bounds[1],
       ci_upper = ci_bounds[2])
```
